#version 450
#extension GL_NV_mesh_shader : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_scalar_block_layout : require

layout (local_size_x=32, local_size_y=1, local_size_z=1) in;
layout (triangles, max_vertices=64, max_primitives=42) out;

struct Vertex
{
    vec3 pos;
    vec2 texCoord;
    vec3 normal;
};

struct Meshlet
{
    uint vertices[64];
    uint indices[126];
    uint triangleCount;
    uint vertexCount;
};

layout(buffer_reference, scalar) readonly buffer VertexBuffer {
    Vertex vertices[];
};
layout(buffer_reference, scalar) readonly buffer MeshletBuffer {
    Meshlet meshlets[];
};

layout(push_constant, scalar) uniform PushConstants
{
    mat4 mvp;
    VertexBuffer vertexBuffer;
    MeshletBuffer meshletBuffer;
    mat3 normalMatrix;
    uint materialIndex;
} pushConstants;

layout(location = 0) out vec2 fragTexcoord[];
layout(location = 1) out vec3 fragNormal[];

void main()
{
    uint meshletIndex = gl_WorkGroupID.x;
    uint threadID = gl_LocalInvocationID.x;
    
    Meshlet meshlet = pushConstants.meshletBuffer.meshlets[meshletIndex];
    
    // NV uses different function names
    gl_PrimitiveCountNV = meshlet.triangleCount;
    
    // Process vertices
    if (threadID < meshlet.vertexCount) {
        uint vertexIndex = meshlet.vertices[threadID];
        Vertex v = pushConstants.vertexBuffer.vertices[vertexIndex];
        
        gl_MeshVerticesNV[threadID].gl_Position = pushConstants.mvp * vec4(v.pos, 1.0);
        fragTexcoord[threadID] = v.texCoord;
        fragNormal[threadID] = pushConstants.normalMatrix * v.normal;
    }
    
    // Process primitives
    if (threadID < meshlet.triangleCount) {
        uint baseIndex = threadID * 3;
        if (baseIndex + 2 < 126) {
            gl_PrimitiveIndicesNV[threadID * 3 + 0] = meshlet.indices[baseIndex + 0];
            gl_PrimitiveIndicesNV[threadID * 3 + 1] = meshlet.indices[baseIndex + 1];
            gl_PrimitiveIndicesNV[threadID * 3 + 2] = meshlet.indices[baseIndex + 2];
        }
    }
}